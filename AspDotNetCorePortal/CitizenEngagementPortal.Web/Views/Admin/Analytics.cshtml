@model CitizenEngagementPortal.Web.Models.ViewModel.Admin.AnalyticsViewModel
@{
    ViewData["Title"] = "Analytics Dashboard";
}

<div class="page-header">
    <div>
        <h1 class="page-title">Analytics dashboard</h1>
        <p class="page-subtitle">Visualize trends, resolution velocity, and engagement patterns to keep your city service machine humming.</p>
    </div>
    <div class="page-actions">
        <a asp-controller="Admin" asp-action="Index" class="btn btn-soft-light">
            <i class="fas fa-arrow-left me-2"></i>Back to dashboard
        </a>
    </div>
</div>

<div class="metric-grid">
    <div class="metric-tile gradient-blue">
        <div class="label">Avg resolution (days)</div>
        <div class="value">@Model.ResolutionTime.Average.ToString("F1")</div>
        <div class="icon"><i class="fas fa-bolt"></i></div>
    </div>
    <div class="metric-tile gradient-emerald">
        <div class="label">Fastest resolution</div>
        <div class="value">@Model.ResolutionTime.Fastest.ToString("F1")</div>
        <div class="icon"><i class="fas fa-gauge-high"></i></div>
    </div>
    <div class="metric-tile gradient-amber">
        <div class="label">Slowest resolution</div>
        <div class="value">@Model.ResolutionTime.Slowest.ToString("F1")</div>
        <div class="icon"><i class="fas fa-hourglass-half"></i></div>
    </div>
    <div class="metric-tile gradient-cyan">
        <div class="label">Active categories</div>
        <div class="value">@Model.IssuesByCategory.Count</div>
        <div class="icon"><i class="fas fa-sitemap"></i></div>
    </div>
</div>

<div class="row g-4">
    <div class="col-lg-6">
        <div class="glass-card p-4 h-100">
            <div class="section-heading">
                <div>
                    <div class="title">Issues by category</div>
                    <div class="subtitle">Where residents are focusing attention</div>
                </div>
            </div>
            @if (Model.IssuesByCategory.Any())
            {
                <canvas id="categoryChart" width="400" height="300"></canvas>
            }
            else
            {
                <div class="empty-state text-center py-4">
                    <p class="text-white-50 mb-0">No data available</p>
                </div>
            }
        </div>
    </div>
    <div class="col-lg-6">
        <div class="glass-card p-4 h-100">
            <div class="section-heading">
                <div>
                    <div class="title">Issues by status</div>
                    <div class="subtitle">Pipeline distribution at a glance</div>
                </div>
            </div>
            @if (Model.IssuesByStatus.Any())
            {
                <canvas id="statusChart" width="400" height="300"></canvas>
            }
            else
            {
                <div class="empty-state text-center py-4">
                    <p class="text-white-50 mb-0">No data available</p>
                </div>
            }
        </div>
    </div>
</div>

<div class="row g-4 mt-1">
    <div class="col-lg-6">
        <div class="glass-card p-4 h-100">
            <div class="section-heading">
                <div>
                    <div class="title">Monthly trends</div>
                    <div class="subtitle">How reporting volume is evolving</div>
                </div>
            </div>
            @if (Model.IssuesByMonth.Any())
            {
                <canvas id="monthlyChart" width="400" height="300"></canvas>
            }
            else
            {
                <div class="empty-state text-center py-4">
                    <p class="text-white-50 mb-0">No data available</p>
                </div>
            }
        </div>
    </div>
    <div class="col-lg-6">
        <div class="glass-card p-4 h-100">
            <div class="section-heading">
                <div>
                    <div class="title">Top problem categories</div>
                    <div class="subtitle">Where teams should focus next</div>
                </div>
            </div>
            @if (Model.TopCategories.Any())
            {
                <div class="list-modern">
                    @foreach (var category in Model.TopCategories)
                    {
                        @{ var color = Model.IssuesByCategory.FirstOrDefault(c => c.Name == category.Name)?.Color ?? "#6B7280"; }
                        <div class="list-modern-item d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center gap-3">
                                <div class="rounded-circle" style="width: 16px; height: 16px; background-color: @color;"></div>
                                <span class="text-white">@category.Name</span>
                            </div>
                            <div class="text-end">
                                <span class="badge-soft">@category.Count</span>
                                <div class="text-white-50 small">@category.Percentage.ToString("F1")%</div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state text-center py-4">
                    <p class="text-white-50 mb-0">No data available</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const categoryData = {
            labels: [@Html.Raw(string.Join(",", Model.IssuesByCategory.Select(c => $"'{c.Name}'")))],
            values: [@string.Join(",", Model.IssuesByCategory.Select(c => c.Count))],
            colors: [@Html.Raw(string.Join(",", Model.IssuesByCategory.Select(c => $"'{c.Color}'")))]
        };

        const statusData = {
            labels: [@Html.Raw(string.Join(",", Model.IssuesByStatus.Select(s => $"'{s.Name}'")))],
            values: [@string.Join(",", Model.IssuesByStatus.Select(s => s.Count))],
            colors: [@Html.Raw(string.Join(",", Model.IssuesByStatus.Select(s => $"'{s.Color}'")))]
        };

        const monthlyData = {
            labels: [@Html.Raw(string.Join(",", Model.IssuesByMonth.Select(m => $"'{m.Month}'")))],
            values: [@string.Join(",", Model.IssuesByMonth.Select(m => m.Count))]
        };

        if (categoryData.labels.length) {
            const ctx = document.getElementById('categoryChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: categoryData.labels,
                    datasets: [{
                        label: 'Number of issues',
                        data: categoryData.values,
                        backgroundColor: categoryData.colors,
                        borderColor: categoryData.colors,
                        borderRadius: 12,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { color: '#cbd5f5' },
                            grid: { color: 'rgba(148, 163, 184, 0.2)' }
                        },
                        x: {
                            ticks: { color: '#cbd5f5' },
                            grid: { color: 'rgba(148, 163, 184, 0.1)' }
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        }

        if (statusData.labels.length) {
            const ctx = document.getElementById('statusChart').getContext('2d');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: statusData.labels,
                    datasets: [{
                        data: statusData.values,
                        backgroundColor: statusData.colors,
                        borderColor: 'rgba(15, 23, 42, 0.85)',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    cutout: '65%',
                    plugins: {
                        legend: { position: 'bottom', labels: { color: '#cbd5f5' } }
                    }
                }
            });
        }

        if (monthlyData.labels.length) {
            const ctx = document.getElementById('monthlyChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: monthlyData.labels,
                    datasets: [{
                        label: 'Issues reported',
                        data: monthlyData.values,
                        borderColor: 'rgba(99, 102, 241, 1)',
                        backgroundColor: 'rgba(99, 102, 241, 0.25)',
                        tension: 0.35,
                        fill: true,
                        pointRadius: 4,
                        pointBackgroundColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { color: '#cbd5f5' },
                            grid: { color: 'rgba(148, 163, 184, 0.2)' }
                        },
                        x: {
                            ticks: { color: '#cbd5f5' },
                            grid: { color: 'rgba(148, 163, 184, 0.1)' }
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        }
    </script>
}
