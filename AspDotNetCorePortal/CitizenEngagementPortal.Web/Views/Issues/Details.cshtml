@model CitizenEngagementPortal.Web.Models.ViewModel.Issues.IssueDetailViewModel
@{
    ViewData["Title"] = "Issue Details";
}

<div class="page-header">
    <div>
        <h1 class="page-title">@Model.Title</h1>
        <p class="page-subtitle">Filed by @Model.Citizen.Name on @Model.CreatedAt.ToString("MMM dd, yyyy") â€¢ Category @Model.Category.Name</p>
    </div>
    <div class="page-actions">
        <a asp-controller="Dashboard" asp-action="Index" class="btn btn-soft-light">
            <i class="fas fa-arrow-left me-2"></i>Back to dashboard
        </a>
    </div>
</div>

<div class="issue-card mb-5">
    <div class="issue-card-content">
        <div class="d-flex flex-wrap justify-content-between gap-3">
            <div class="flex-grow-1">
                <h2 class="h4 text-white mb-3">Issue summary</h2>
                <p class="text-white-50 mb-0">@Model.Description</p>
            </div>
            <div class="text-end">
                <div class="issue-meta justify-content-end">
                    <span class="chip chip-category" style="background: linear-gradient(135deg, @Model.Category.Color, rgba(255,255,255,0.15));">
                        <i class="fas fa-layer-group"></i>@Model.Category.Name
                    </span>
                    <span class="chip chip-status @(Model.Status switch
                    {
                        IssueStatus.Pending => "pending",
                        IssueStatus.InProgress => "in-progress",
                        IssueStatus.Resolved => "resolved",
                        IssueStatus.Rejected => "rejected",
                        _ => string.Empty
                    })">
                        <i class="fas fa-signal"></i>@Model.Status
                    </span>
                    <span class="chip chip-priority @(Model.Priority switch
                    {
                        Priority.High => "high",
                        Priority.Urgent => "urgent",
                        _ => string.Empty
                    })">
                        <i class="fas fa-bolt"></i>@Model.Priority
                    </span>
                </div>
                <small class="text-white-50 d-block">Report ID: @Model.Id</small>
            </div>
        </div>

        <div class="card-section-divider"></div>

        <div class="row g-4">
            <div class="col-lg-4">
                <div class="glass-card p-4 h-100">
                    <div class="section-heading">
                        <div class="title">Location</div>
                        <div class="subtitle">Where the issue exists</div>
                    </div>
                    <p class="text-white-75 mb-3"><i class="fas fa-map-marker-alt me-2"></i>@Model.Location</p>
                    @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
                    {
                        <div class="badge-soft d-inline-flex align-items-center gap-2">
                            <i class="fas fa-globe"></i>
                            @Model.Latitude.Value.ToString("F4"), @Model.Longitude.Value.ToString("F4")
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-4">
                <div class="glass-card p-4 h-100">
                    <div class="section-heading">
                        <div class="title">Timeline</div>
                        <div class="subtitle">Key milestones</div>
                    </div>
                    <ul class="list-unstyled text-white-75 mb-0">
                        <li class="mb-2"><i class="fas fa-calendar-plus me-2"></i>Created: @Model.CreatedAt.ToString("MMM dd, yyyy")</li>
                        @if (Model.AssignedAt.HasValue)
                        {
                            <li class="mb-2"><i class="fas fa-user-check me-2"></i>Assigned: @Model.AssignedAt.Value.ToString("MMM dd, yyyy")</li>
                        }
                        @if (Model.ResolvedAt.HasValue)
                        {
                            <li class="mb-2"><i class="fas fa-check-circle me-2"></i>Resolved: @Model.ResolvedAt.Value.ToString("MMM dd, yyyy")</li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="glass-card p-4 h-100">
                    <div class="section-heading">
                        <div class="title">Assigned team</div>
                        <div class="subtitle">Who&apos;s handling it</div>
                    </div>
                    @if (Model.Assignee != null)
                    {
                        <div class="d-flex align-items-center gap-3">
                            <div class="avatar-placeholder">
                                <i class="fas fa-user"></i>
                            </div>
                            <div>
                                <div class="text-white fw-semibold">@Model.Assignee.Name</div>
                                <small class="text-white-50">@Model.Assignee.Email</small>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-white-50 mb-0">Not yet assigned</p>
                    }
                </div>
            </div>
        </div>

        @if (Model.Media.Any())
        {
            <div class="card-section-divider"></div>
            <div class="section-heading">
                <div>
                    <div class="title">Attached media</div>
                    <div class="subtitle">Supporting visuals from the field</div>
                </div>
            </div>
            <div class="row g-3">
                @foreach (var media in Model.Media)
                {
                    <div class="col-md-3 col-sm-6">
                        <div class="glass-card overflow-hidden h-100">
                            @if (media.Type == MediaType.Image)
                            {
                                <img src="@media.Url" class="w-100" alt="Issue media" style="height: 160px; object-fit: cover;" />
                            }
                            else
                            {
                                <div class="d-flex align-items-center justify-content-center" style="height: 160px; background: rgba(148, 163, 184, 0.1);">
                                    <i class="fas fa-video fa-2x text-white-50"></i>
                                </div>
                            }
                            <div class="p-3 text-center text-white-50 text-uppercase small">@media.Type</div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (Model.CanAssign || Model.CanResolve)
        {
            <div class="card-section-divider"></div>
            <div class="section-heading">
                <div class="title">Actions</div>
                <div class="subtitle">Update status or assign owners</div>
            </div>
            <div class="issue-actions">
                @if (Model.CanAssign && Model.Status == IssueStatus.Pending)
                {
                    <a asp-controller="Admin" asp-action="AssignIssue" asp-route-id="@Model.Id" class="btn btn-primary">
                        <i class="fas fa-user-plus me-2"></i>Assign issue
                    </a>
                }
                @if (Model.CanResolve && Model.Status != IssueStatus.Resolved)
                {
                    <form asp-controller="Admin" asp-action="UpdateIssueStatus" method="post" class="d-inline">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <input type="hidden" name="status" value="@IssueStatus.Resolved" />
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-check me-2"></i>Mark resolved
                        </button>
                    </form>
                }
                @if (Model.CanResolve && Model.Status == IssueStatus.Resolved)
                {
                    <form asp-controller="Admin" asp-action="UpdateIssueStatus" method="post" class="d-inline">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <input type="hidden" name="status" value="@IssueStatus.InProgress" />
                        <button type="submit" class="btn btn-warning">
                            <i class="fas fa-undo me-2"></i>Reopen issue
                        </button>
                    </form>
                }
            </div>
        }
    </div>
</div>

<div class="form-card card">
    <div class="card-header border-0">
        <div class="d-flex justify-content-between align-items-center">
            <h3 class="h4 text-white mb-0">Comments (@Model.Comments.Count)</h3>
        </div>
    </div>
    <div class="card-body">
        <form asp-controller="Issues" asp-action="AddComment" method="post" class="mb-4">
            <input type="hidden" name="issueId" value="@Model.Id" />
            <label class="form-label fw-semibold">Add a comment</label>
            <textarea name="content" class="form-control" rows="3" placeholder="Share your thoughts or updates about this issue..." required></textarea>
            <div class="d-flex justify-content-end mt-3">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane me-2"></i>Post comment
                </button>
            </div>
        </form>

        <div class="card-section-divider"></div>

        @if (Model.Comments.Any())
        {
            <div class="list-modern">
                @foreach (var comment in Model.Comments)
                {
                    <div class="list-modern-item">
                        <div class="d-flex gap-3">
                            <div class="comment-author">
                                @(comment.Author.Name?.FirstOrDefault() ?? comment.Author.Email.FirstOrDefault())
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <div class="text-white fw-semibold">@comment.Author.Name</div>
                                        <small class="text-white-50">@comment.Author.Email</small>
                                    </div>
                                    <small class="text-white-50">@comment.CreatedAt.ToString("MMM dd, yyyy HH:mm")</small>
                                </div>
                                <p class="text-white-75 mb-0 mt-2">@comment.Content</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state text-center py-4">
                <p class="text-white-50 mb-0">No comments yet. Be the first to contribute.</p>
            </div>
        }
    </div>
</div>
